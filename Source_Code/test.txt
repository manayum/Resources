1: Class: a blueprint for how a data structure should function. 
A class is a set of instructions that describe how a data structure should behave.


2: Constructor: instructs the class to set up the initial state of an object.
	A class constructor will allow us to create Dog instances. With a class constructor, we can set some information about the Dog.
	If we do not create a class constructor, Java provides one that does not allow you to set initial information.

3: Object: instance of a class that stores the state of a class
	An instance of a class is known as an object in Java.

4: Method: set of instructions that can be called on an object

5: Parameter: values that can be specified when creating an object or calling a method

6: Return value: specifies the data type that a method will return after it runs

7: Inheritance: allows one class to use functionality defined in another class

import java.util.*;

public class Olympics {

	public static void main(String[] args) {

		//Some Olympic sports 

		ArrayList<String> olympicSports = new ArrayList<String>();
		olympicSports.add("Archery");
		olympicSports.add("Boxing");
		olympicSports.add("Cricket");
		olympicSports.add("Diving");

		System.out.println("There are " + olympicSports.size() + " Olympic sports in this list. They are: ");

		for (String sport: olympicSports) {
			System.out.println(sport);
		}

		//Host cities and the year they hosted the summer Olympics

		HashMap<String, Integer> hostCities = new HashMap<String, Integer>();

		hostCities.put("Beijing", 2008);
		hostCities.put("London", 2012);
		hostCities.put("Rio de Janeiro", 2016);

		for (String city: hostCities.keySet()) {
			
			if (hostCities.get(city) < 2016) {

				System.out.println(city + " hosted the summer Olympics in " + hostCities.get(city) + ".");

			} else {

				System.out.println(city + " will host the summer Olympics in " + hostCities.get(city) + ".");

			}
		}

	}

}